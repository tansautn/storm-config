<templateSet group="PHP">
  <template name="prn" value="print_r($END$);" description="print_r" toReformat="false" toShortenFQNames="true" />
  <template name="vad" value="echo &quot;&lt;pre&gt;&quot;;&#10;var_dump($END$);&#10;echo &quot;&lt;/pre&gt;&quot;;&#10;exit();" description="var_dump" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="ech" value="echo ($this-&gt;curl-&gt;response);&#10;$END$" description="echo curl response" toReformat="false" toShortenFQNames="true" />
  <template name="zdeg" value="\Zend\Debug\Debug::dump($VALUE$);&#10;exit();$END$" description="Zend Debug" toReformat="true" toShortenFQNames="true">
    <variable name="VALUE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="deberr" value="$errLevel = E_ALL &amp; ~E_DEPRECATED &amp; ~E_WARNING &amp; ~E_NOTICE;&#10;        @ini_set('display_errors', 'on');&#10;        @error_reporting($errLevel);&#10;        set_error_handler(&#10;            static function (&#10;                $errno,&#10;                $errStr,&#10;                $errFile = null,&#10;                $errLine = null,&#10;                $errContext = null&#10;            ){&#10;                echo '&lt;pre&gt;';&#10;                $msg = sprintf('[%d] %s at line %d in %s' . PHP_EOL, $errno, $errStr, $errLine, $errFile);&#10;                echo $msg;&#10;                echo '&lt;pre&gt;';&#10;//                throw new RuntimeException($msg);&#10;            }&#10;        , $errLevel);&#10;        set_exception_handler(static function (\Throwable $e) {&#10;            echo '&lt;h1 id=&quot;zuko-debug&quot;&gt;Caught Exception&lt;/h1&gt;&lt;pre&gt;';&#10;            $msg = sprintf('[%s code #%d] %s at line %d in %s' . PHP_EOL, get_class($e), $e-&gt;getCode(), $e-&gt;getMessage(), $e-&gt;getLine(), $e-&gt;getFile());&#10;            echo $msg . PHP_EOL;&#10;            print_r($e-&gt;getTrace());&#10;            echo '&lt;pre&gt;';&#10;        });&#10;        register_shutdown_function(static function () {&#10;            $err = error_get_last();&#10;            $msg = sprintf('[%d] %s at line %d in %s' . PHP_EOL, $err['type'], $err['message'], $err['line'], $err['file']);&#10;            throw new ErrorException($msg)&#10;        });" description="Insert display error &amp; error_reporting" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ANY_OPENAPI_JSON_FILE" value="false" />
      <option name="ANY_OPENAPI_YAML_FILE" value="false" />
      <option name="BashSupport Pro" value="false" />
      <option name="CPT" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="GENERAL_JSON_FILE" value="false" />
      <option name="GENERAL_YAML_FILE" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="MODERN REACT" value="false" />
      <option name="OTHER" value="true" />
      <option name="RCB_HIDDEN_CONTEXT" value="false" />
      <option name="REACT" value="false" />
      <option name="REQUEST" value="false" />
      <option name="RUST_FILE" value="false" />
      <option name="SQL" value="false" />
      <option name="Twig" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
      <option name="bashpro.bash" value="false" />
      <option name="bashpro.bats-core" value="false" />
      <option name="bashpro.zsh" value="false" />
    </context>
  </template>
  <template name="eol" value="echo PHP_EOL;&#10;$END$" description="echo eol" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="coll" value=" defaultstate=&quot;collapsed&quot;" description="defaultstate=&quot;collapsed&quot;" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="PHP Comment" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="lzdi" value="    if(!$this-&gt;$PROPERTY$ instanceof $INSTANCE$){&#10;        $this-&gt;$PROPERTY$ = app()-&gt;make($INSTANCE$::class);&#10;    }&#10;    $END$&#10;    return $this-&gt;$PROPERTY$;" description="Lazy dependency injection" toReformat="true" toShortenFQNames="true">
    <variable name="PROPERTY" expression="phpVar" defaultValue="dependency" alwaysStopAt="true" />
    <variable name="INSTANCE" expression="phpClassName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="fori" value="for($INDEX$ = 0; $INDEX$ &lt; $LIMIT$; $INDEX$++) {&#10;  $END$&#10;}" description="Create for loop" toReformat="false" toShortenFQNames="true">
    <variable name="INDEX" expression="phpVar" defaultValue="$i" alwaysStopAt="true" />
    <variable name="LIMIT" expression="phpVar" defaultValue="$limit" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="ded" value="die(dump($END$));" description="dump then exit" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="docctx" value="/**&#10; * @property-read \Context|\ContextCore $context&#10; * @mixin \ModuleCore&#10; */" description="add comment doc context" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="logfunc" value="public function log($value) {&#10;    $file = _PS_ROOT_DIR_ . '/var/zuko.log';&#10;    if(is_array($value) || is_object($value)){&#10;        $value = var_export($value, true);&#10;    }&#10;    if(($i = array_search($value, [false, true, null], true)) !== false){&#10;        $cast = ['false', 'true', 'null'];&#10;        $value = $cast[$i];&#10;    }&#10;    file_put_contents($file, $value . PHP_EOL, FILE_APPEND);&#10;}" description="insert log function blog" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="sdr" value="if (isset($_SERVER['HTTP_X_ZUKO_DEBUG']) &amp;&amp; $_SERVER['HTTP_X_ZUKO_DEBUG']) {&#10;    $END$&#10;}" description="Tools getRemoteAddr Dev Block" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="docrepo" value=" * @method $MODEL$ find($id)&#10; * @method $MODEL$ findOrFail($id)&#10; * @method $MODEL$ firstOrFail()&#10; * @method $MODEL$|\Illuminate\Database\Eloquent\Builder getCurrentQuery()&#10; * @method $MODEL$ getModel()" description="phpclass doc for repository" toReformat="false" toShortenFQNames="true">
    <variable name="MODEL" expression="phpClassName()" defaultValue="Model" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
      <option name="PHP Expression" value="false" />
      <option name="PHP Interface Member" value="false" />
      <option name="PHP Statement" value="false" />
      <option name="PHP String Literal" value="false" />
      <option name="PHP Trait Member" value="false" />
    </context>
  </template>
  <template name="dbl" value="\Debugbar::log($VAR$);" description="Insert Debugbar::log" toReformat="false" toShortenFQNames="true">
    <variable name="VAR" expression="phpSuggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Angular" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="HTML" value="false" />
      <option name="HTTP_CLIENT_ENVIRONMENT" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JS_AND_TS_CONTEXT" value="false" />
      <option name="LIQUID" value="false" />
      <option name="OTHER" value="true" />
      <option name="RCB_HIDDEN_CONTEXT" value="false" />
      <option name="REQUEST" value="false" />
      <option name="ROOT_PESTPHP" value="false" />
      <option name="SHELL_SCRIPT" value="false" />
      <option name="SQL" value="false" />
      <option name="Twig" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="Writerside MD" value="false" />
      <option name="Writerside XML" value="false" />
      <option name="XML" value="false" />
      <option name="powershell.context.file" value="false" />
    </context>
  </template>
  <template name="trace" value="echo '&lt;pre&gt;';&#10;var_dump(debug_backtrace($FLAGS$));&#10;echo '&lt;/pre&gt;';&#10;$END$" description="debug_backtrace" toReformat="true" toShortenFQNames="true">
    <variable name="FLAGS" expression="" defaultValue="~1" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="trac" value="echo '&lt;pre&gt;';&#10;dump(debug_backtrace($FLAGS$));&#10;echo '&lt;/pre&gt;';&#10;$END$" description="debug_backtrace using dump" toReformat="true" toShortenFQNames="true">
    <variable name="FLAGS" expression="" defaultValue="~1" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="ecli" value="if(PHP_SAPI == 'cli'){&#10;    echo '$END$';&#10;}" description="echo when CLI SAPI" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>